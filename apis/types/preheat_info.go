// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PreheatInfo return detailed information of a preheat task in supernode. An image preheat task may contain multiple downloading
// task because that an image may have more than one layer.
//
// swagger:model PreheatInfo
type PreheatInfo struct {

	// ID of preheat task.
	//
	ID string `json:"ID,omitempty"`

	// the preheat task finish time
	// Format: date-time
	FinishTime strfmt.DateTime `json:"finishTime,omitempty"`

	// the preheat task start time
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// The status of preheat task.
	//   WAITING -----> RUNNING -----> SUCCESS
	//                            |--> FAILED
	// The initial status of a created preheat task is WAITING.
	// It's finished when a preheat task's status is FAILED or SUCCESS.
	// A finished preheat task's information can be queried within 24 hours.
	//
	// Enum: [WAITING RUNNING FAILED SUCCESS]
	Status string `json:"status,omitempty"`
}

// Validate validates this preheat info
func (m *PreheatInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PreheatInfo) validateFinishTime(formats strfmt.Registry) (err error) {

	if swag.IsZero(m.FinishTime) { // not required
		return
	}

	return validate.FormatOf("finishTime", "body", "date-time", m.FinishTime.String(), formats)
}

func (m *PreheatInfo) validateStartTime(formats strfmt.Registry) (err error) {

	if swag.IsZero(m.StartTime) { // not required
		return
	}
	return validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats)
}

var preheatInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WAITING","RUNNING","FAILED","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		preheatInfoTypeStatusPropEnum = append(preheatInfoTypeStatusPropEnum, v)
	}
}

const (

	// PreheatInfoStatusWAITING captures enum value "WAITING"
	PreheatInfoStatusWAITING string = "WAITING"

	// PreheatInfoStatusRUNNING captures enum value "RUNNING"
	PreheatInfoStatusRUNNING string = "RUNNING"

	// PreheatInfoStatusFAILED captures enum value "FAILED"
	PreheatInfoStatusFAILED string = "FAILED"

	// PreheatInfoStatusSUCCESS captures enum value "SUCCESS"
	PreheatInfoStatusSUCCESS string = "SUCCESS"
)

// prop value enum
func (m *PreheatInfo) validateStatusEnum(path, location string, value string) error {
	return validate.Enum(path, location, value, preheatInfoTypeStatusPropEnum)
}

func (m *PreheatInfo) validateStatus(formats strfmt.Registry) (err error) {

	if swag.IsZero(m.Status) { // not required
		return
	}

	// value enum
	return m.validateStatusEnum("status", "body", m.Status)
}

// MarshalBinary interface implementation
func (m *PreheatInfo) MarshalBinary() (b []byte, err error) {
	if m == nil {
		return
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PreheatInfo) UnmarshalBinary(b []byte) (err error) {
	var res PreheatInfo
	if err = swag.ReadJSON(b, &res); err != nil {
		return
	}
	*m = res
	return
}
