// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PiecePullRequest request used to pull pieces that have not been downloaded.
// swagger:model PiecePullRequest
type PiecePullRequest struct {

	// dfgetTaskStatus indicates whether the dfgetTask is running.
	//
	// Enum: [STARTED RUNNING FINISHED]
	DfgetTaskStatus string `json:"dfgetTaskStatus,omitempty"`

	// the uploader peerID
	//
	DstPID string `json:"dstPID,omitempty"`

	// the range of specific piece in the task, example "0-45565".
	//
	PieceRange string `json:"pieceRange,omitempty"`

	// pieceResult It indicates whether the dfgetTask successfully download the piece.
	// It's only useful when `status` is `RUNNING`.
	//
	// Enum: [FAILED SUCCESS INVALID SEMISUC]
	PieceResult string `json:"pieceResult,omitempty"`
}

// Validate validates this piece pull request
func (m *PiecePullRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDfgetTaskStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePieceResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var piecePullRequestTypeDfgetTaskStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STARTED","RUNNING","FINISHED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		piecePullRequestTypeDfgetTaskStatusPropEnum = append(piecePullRequestTypeDfgetTaskStatusPropEnum, v)
	}
}

const (

	// PiecePullRequestDfgetTaskStatusSTARTED captures enum value "STARTED"
	PiecePullRequestDfgetTaskStatusSTARTED string = "STARTED"

	// PiecePullRequestDfgetTaskStatusRUNNING captures enum value "RUNNING"
	PiecePullRequestDfgetTaskStatusRUNNING string = "RUNNING"

	// PiecePullRequestDfgetTaskStatusFINISHED captures enum value "FINISHED"
	PiecePullRequestDfgetTaskStatusFINISHED string = "FINISHED"
)

// prop value enum
func (m *PiecePullRequest) validateDfgetTaskStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, piecePullRequestTypeDfgetTaskStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PiecePullRequest) validateDfgetTaskStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.DfgetTaskStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateDfgetTaskStatusEnum("dfgetTaskStatus", "body", m.DfgetTaskStatus); err != nil {
		return err
	}

	return nil
}

var piecePullRequestTypePieceResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FAILED","SUCCESS","INVALID","SEMISUC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		piecePullRequestTypePieceResultPropEnum = append(piecePullRequestTypePieceResultPropEnum, v)
	}
}

const (

	// PiecePullRequestPieceResultFAILED captures enum value "FAILED"
	PiecePullRequestPieceResultFAILED string = "FAILED"

	// PiecePullRequestPieceResultSUCCESS captures enum value "SUCCESS"
	PiecePullRequestPieceResultSUCCESS string = "SUCCESS"

	// PiecePullRequestPieceResultINVALID captures enum value "INVALID"
	PiecePullRequestPieceResultINVALID string = "INVALID"

	// PiecePullRequestPieceResultSEMISUC captures enum value "SEMISUC"
	PiecePullRequestPieceResultSEMISUC string = "SEMISUC"
)

// prop value enum
func (m *PiecePullRequest) validatePieceResultEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, piecePullRequestTypePieceResultPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PiecePullRequest) validatePieceResult(formats strfmt.Registry) error {

	if swag.IsZero(m.PieceResult) { // not required
		return nil
	}

	// value enum
	if err := m.validatePieceResultEnum("pieceResult", "body", m.PieceResult); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PiecePullRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PiecePullRequest) UnmarshalBinary(b []byte) error {
	var res PiecePullRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
