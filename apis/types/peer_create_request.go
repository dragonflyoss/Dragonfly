// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PeerCreateRequest PeerCreateRequest is used to create a peer instance in supernode.
// Usually, when dfget is going to register in supernode as a peer,
// it will send PeerCreateRequest to supernode.
//
// swagger:model PeerCreateRequest
type PeerCreateRequest struct {

	// Peer ID of dfget client. Every peer has a unique ID among peer network.
	ID string `json:"ID,omitempty"`

	// IP address which peer client carries
	// Format: ipv4
	IP strfmt.IPv4 `json:"IP,omitempty"`

	// This field is for debugging. When caller of dfget is using it to files, he can pass callSystem
	// name to dfget. When this field is passing to supernode, supernode has ability to filter them via
	// some black/white list to guarantee security, or some other purposes.
	//
	// Min Length: 1
	CallSystem string `json:"callSystem,omitempty"`

	// tells whether it is a call from dfdaemon.
	Dfdaemon bool `json:"dfdaemon,omitempty"`

	// host name of peer client node, as a valid RFC 1123 hostname.
	// Min Length: 1
	// Format: hostname
	HostName strfmt.Hostname `json:"hostName,omitempty"`

	// This is actually an HTTP URLPATH of dfget.
	// Other peers can access the source file via this PATH.
	//
	Path string `json:"path,omitempty"`

	// when registering, dfget will setup one uploader process.
	// This one acts as a server for peer pulling tasks.
	// This port is which this server listens on.
	//
	// Maximum: 65535
	// Minimum: 30000
	Port int64 `json:"port,omitempty"`

	// version number of dfget binary
	Version string `json:"version,omitempty"`
}

// Validate validates this peer create request
func (m *PeerCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeerCreateRequest) validateIP(formats strfmt.Registry) (err error) {
	if swag.IsZero(m.IP) { // not required
		return
	}
	return validate.FormatOf("IP", "body", "ipv4", m.IP.String(), formats)
}

func (m *PeerCreateRequest) validateCallSystem(formats strfmt.Registry) (err error) {

	if swag.IsZero(m.CallSystem) { // not required
		return
	}
	return validate.MinLength("callSystem", "body", string(m.CallSystem), 1)
}

func (m *PeerCreateRequest) validateHostName(formats strfmt.Registry) (err error) {

	if swag.IsZero(m.HostName) { // not required
		return
	}
	if err = validate.MinLength("hostName", "body", string(m.HostName), 1); err != nil {
		return
	}
	return validate.FormatOf("hostName", "body", "hostname", m.HostName.String(), formats)
}

func (m *PeerCreateRequest) validatePort(formats strfmt.Registry) (err error) {

	if swag.IsZero(m.Port) { // not required
		return
	}
	if err = validate.MinimumInt("port", "body", int64(m.Port), 30000, false); err != nil {
		return
	}
	return validate.MaximumInt("port", "body", int64(m.Port), 65535, false)
}

// MarshalBinary interface implementation
func (m *PeerCreateRequest) MarshalBinary() (b []byte, err error) {
	if m == nil {
		return
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeerCreateRequest) UnmarshalBinary(b []byte) (err error) {
	var res PeerCreateRequest
	if err = swag.ReadJSON(b, &res); err != nil {
		return
	}
	*m = res
	return
}
