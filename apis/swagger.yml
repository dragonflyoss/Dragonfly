---
swagger: "2.0"
schemes:
  - "http"
  - "https"
produces:
  - "application/json"
  - "text/plain"
consumes:
  - "application/json"
  - "text/plain"
basePath: "/v1.24"
info:
  title: "Drgonfly SuperNode API"
  version: "0.1"
  description: |
    API is an HTTP API served by Dragonfly's SuperNode. It is the API dfget or Harbor uses to communicate
    with the supernode.
tags:
  # primary objects
  - name: "Peer"
    x-displayName: "Peers"
    description: "Create and manage peer nodes in peer networks."
  - name: "Task"
    x-displayName: "Tasks"
    description: "create and manage image/file distribution task in supernode."
  - name: "Piece"
    x-displayName: "Pieces"
    description: "create and manage image/file pieces in supernode."
  - name: "PreheatTask"
    x-displayName: "PreheatTasks"
    description: "Create and manage image or file preheat task in supernode."

paths:
  /_ping:
    get:
      summary: "Ping"
      description: "This is a dummy endpoint you can use to test if the server is accessible."
      responses:
        200:
          description: "no error"
          schema:
            type: "string"
            example: "OK"
        500:
          $ref: "#/responses/500ErrorResponse"

  /peers:
    post:
      summary: "register dfget in Supernode as a peer node"
      description: "dfget sends request to register in Supernode as a peer node"
      parameters:
        - name: "body"
          in: "body"
          description: "request body which contains peer registrar information."
          schema:
            $ref: "#/definitions/PeerCreateRequest"
      responses:
        201:
          description: "no error"
          schema:
            $ref: "#/definitions/PeerCreateResponse"
        400:
          description: "bad parameter"
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: "#/responses/500ErrorResponse"

  /peers/{id}:
    get: 
      summary: "get a peer in supernode"
      description: "return low-level information of a peer in supernode."
      produces:
          - "application/json"
      parameters:
        - name: id
          in: path
          required: true
          description: ID of peer
          type: string
      responses:
        200:
          description: "no error"
          schema: 
            $ref: "#/definitions/PeerInfo"
        404: 
            $ref: "#/responses/404ErrorResponse"
        500:
            $ref: "#/responses/500ErrorResponse"

    delete:
      summary: "delete a peer in supernode"
      description: |
        dfget stops playing a role as a peer in peer network constructed by supernode.
        when dfget lasts in five minutes without downloading or uploading task, dfget
        automatically sends a DELETE /peers/{id} request.
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of peer"
          type: string
      responses:
        204:
          description: "no error"
        404:
          description: "no such peer"
          schema:
            $ref: '#/responses/404ErrorResponse'
        500:
          $ref: "#/responses/500ErrorResponse"

  /tasks:
    post:
      summary: "create a task"
      description: |
        Create a peer-to-peer downloading task in supernode.
      parameters:
        - name: "body"
          in: "body"
          description: "request body which contains task creation information"
          schema:
            $ref: "#/definitions/TaskCreateRequest"
      responses:
        201:
          description: "no error"
          schema:
            $ref: "#/definitions/TaskCreateResponse"
        400:
          description: "bad parameter"
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: "#/responses/500ErrorResponse"

  /tasks/{id}:
    get:
      summary: "get a task"
      description: |
        return low-level information of a task in supernode.
      produces:
          - "application/json"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of task"
          type: string
      responses:
        200:
          description: "no error"
          schema: 
            $ref: "#/definitions/TaskInfo"
        404: 
            $ref: "#/responses/404ErrorResponse"
        500:
            $ref: "#/responses/500ErrorResponse"

    put:
      summary: "update a task"
      description: |
        update information of a task.
      consumes:
          - "application/json"
      produces:
          - "application/json"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of task"
          type: string
        - name: "TaskUpdateRequest"
          in: "body"
          description: |
            request body which contains task update information"
          schema:
            $ref: "#/definitions/TaskUpdateRequest"
      responses:
        200:
          description: "no error"
        404: 
            $ref: "#/responses/404ErrorResponse"
        500:
            $ref: "#/responses/500ErrorResponse"

    delete:
      summary: "delete a task"
      description: |
        delete a peer-to-peer task in supernode.
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of task"
          type: string
      responses:
        204:
          description: "no error"
        404:
          description: "no such peer"
          schema:
            $ref: '#/responses/404ErrorResponse'
        500:
          $ref: "#/responses/500ErrorResponse"

  /tasks/{id}/pieces:
    get:
      summary: "Get pieces in task"
      description: "Get fixed number of pieces in a task. The number is set in query."
      produces:
        - "application/json"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of task"
          type: string
        - name: num
          in: query
          type: "integer"
          format: int64
          required: false
          description: |
            Request number of pieces of task. If request number is larger than the total pieces in supernode,
            supernode returns the total pieces of task. If not set, supernode will set 4 by default.
      responses:
        200:
          description: "no error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PieceInfo"
        404:
          description: "no such task"
          schema:
            $ref: "#/responses/404ErrorResponse"
        500:
          $ref: "#/responses/500ErrorResponse"  

  /pieces/{id}:
    get:
      summary: "Get a piece"
      description: |
        Get detailed information of a piece in supernode.
      produces:
        - "application/json"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of piece"
          type: string
      responses:
        200:
          description: "no error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PieceInfo"
        404:
          description: "no such task"
          schema:
            $ref: "#/responses/404ErrorResponse"
        500:
          $ref: "#/responses/500ErrorResponse" 
    
    put:
      summary: "Update a piece"
      description: |
        Update some information of piece, like status of piece.
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of piece"
          type: string
        - name: "PieceUpdateRequest"
          in: "body"
          description: "request body which contains task update information"
          schema:
            $ref: "#/definitions/PieceUpdateRequest"
      responses:
        200:
          description: "no error"
        404: 
            $ref: "#/responses/404ErrorResponse"
        500:
            $ref: "#/responses/500ErrorResponse"

  /preheats:
    post:
      summary: "Create a Preheat Task"
      description: |
        Create a preheat task in supernode to first download image/file which is ready.
        Preheat action will shorten the period for dfget to get what it wants. In details,
        after preheat action finishes downloading image/file to supernode, dfget can send
        request to setup a peer-to-peer network immediately.
      parameters:
        - name: "PreheatCreateRequest"
          in: "body"
          description: "request body which contains preheat task creation information"
          schema:
            $ref: "#/definitions/PreheatCreateRequest"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/PreheatCreateResponse"
        400:
          description: "bad parameter"
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: "#/responses/500ErrorResponse"

    get:
      summary: "List Preheat Tasks"
      description: |
        List preheat tasks in supernode of Dragonfly. This API can list all the existing preheat tasks
        in supernode. Note, when a preheat is finished after PreheatGCThreshold, it will be GCed, then
        this preheat will not be gotten by preheat tasks list API.
      responses:
        200:
          description: "no error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PreheatInfo"
        400:
          description: "bad parameter"
          schema:
            $ref: '#/definitions/Error'
        500:
          $ref: "#/responses/500ErrorResponse"
  
  /preheats/{id}:
    get: 
      summary: "Get a preheat task"
      description: |
        get detailed information of a preheat task in supernode.
      produces:
        - "application/json"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of preheat task"
          type: string
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/PreheatInfo"
        404:
          description: "no such preheat task"
          schema:
            $ref: "#/responses/404ErrorResponse"
        500:
          $ref: "#/responses/500ErrorResponse"   


definitions:
  Error:
    type: "object"
    properties:
      message:
        type: string

  PeerCreateRequest:
    type: "object"
    description: |
      PeerCreateRequest is used to create a peer instance in supernode.
      Usually, when dfget is going to register in supernode as a peer,
      it will send PeerCreateRequest to supernode.
    properties:
      ID:
        type: "string"
        description: "Peer ID of dfget client. Every peer has a unique ID among peer network."
      IP:
        type: "string"
        description: "IP address which peer client carries"
        format: "ipv4"
      hostName:
        type: "string"
        description: "host name of peer client node, as a valid RFC 1123 hostname."
        format: "hostname"
        minLength: 1
      port:
        type: "integer"
        description: |
          when registering, dfget will setup one uploader process. 
          This one acts as a server for peer pulling tasks.
          This port is which this server listens on.
        format: "int64"
        minimum: 30000
        maximum: 65535
      callSystem:
        type: "string"
        description: |
          This field is for debugging. When caller of dfget is using it to files, he can pass callSystem
          name to dfget. When this field is passing to supernode, supernode has ability to filter them via 
          some black/white list to guarantee security, or some other purposes.
        minLength: 1
      version: 
        type: "string"
        description: "version number of dfget binary"
      dfdaemon:
        type: "boolean"
        description: "tells whether it is a call from dfdaemon."
      path:
        type: "string"
        description: |
          This is actually an HTTP URLPATH of dfget. 
          Other peers can access the source file via this PATH.
  
  PeerCreateResponse:
    type: "object"
    description: "ID of created peer."
    properties:
      ID: 
        type: "string"
        description: ID of created peer.
  
  PeerInfo:
    type: "object"
    description: "The detailed information of a peer in supernode."
    properties:
      ID:
        type: "string"
        description: "ID of peer"
      IP:
        type: "string"
        description: "IP address which peer client carries"
        format: "ipv4"
      hostName:
        type: "string"
        description: "host name of peer client node, as a valid RFC 1123 hostname."
        format: "hostname"
        minLength: 1
      port:
        type: "integer"
        description: |
          when registering, dfget will setup one uploader process. 
          This one acts as a server for peer pulling tasks.
          This port is which this server listens on.
        format: "int64"
        minimum: 30000
        maximum: 65535
      callSystem:
        type: "string"
        description: |
          This field is for debugging. When caller of dfget is using it to files, he can pass callSystem
          name to dfget. When this field is passing to supernode, supernode has ability to filter them via 
          some black/white list to guarantee security, or some other purposes.
        minLength: 1
      version: 
        type: "string"
        description: "version number of dfget binary"
      dfdaemon:
        type: "boolean"
        description: "tells whether it is a call from dfdaemon."
      path:
        type: "string"
        description: |
          This is actually an HTTP URLPATH of dfget. 
          Other peers can access the source file via this PATH.

  TaskCreateRequest:
    type: "object"
    description: ""
    properties:
      rawURL:
        type: "string"
        description: |
          The is the resource's URL which user uses dfget to download. The location of URL can be anywhere, LAN or WAN.
          For image distribution, this is image layer's URL in image registry.
          The resource url is provided by command line parameter.
      taskURL:
        type: "string"
        description: |
          taskURL is generated from rawURL. rawURL may contains some queries or parameter, dfget will filter some queries via
          --filter parameter of dfget. The usage of it is that different rawURL may generate the same taskID.
      md5:
        type: "string"
        description: |
          md5 checksum for the resource to distribute. dfget catches this parameter from dfget's CLI
          and passes it to supernode. When supernode finishes downloading file/image from the source location,
          it will validate the source file with this md5 value to check whether this is a valid file.
      identifier:
        type: "string"
        description: |
          special attribute of remote source file. This field is used with taskURL to generate new taskID to
          indetify different downloading task of remote source file. For example, if user A and user B uses
          the same taskURL and taskID to download file, A and B will share the same peer network to distribute files.
          If user A additionally adds an indentifier with taskURL, while user B still carries only taskURL, then A's
          generated taskID is different from B, and the result is that two users use different peer networks.
      headers:
        type: "object"
        description: |
          extra HTTP headers sent to the rawURL.
          This field is carried with the request to supernode. 
          Supernode will extract these HTTP headers, and set them in HTTP downloading requests
          from source server as user's wish.
        additionalProperties:
          type: "string"

  TaskCreateResponse:
    type: "object"
    description: "response get from task creation request."
    properties:
      ID:
        type: "string"
        description: "ID of the created task."
  
  TaskInfo:
    type: "object"
    description: "detailed information about task in supernode."
    properties:
      ID:
        type: "string"
        description: "ID of the task."

  TaskUpdateRequest:
    type: "object"
    description: "request used to update task attributes."
    properties:
      ID:
        type: "string"
        description: "ID of the created task."

  PieceInfo:
    type: "object"
    description: "Peer's detailed information in supernode."
    properties:
      ID:
        type: "string"
        description: "ID of the peer"
  
  PieceUpdateRequest:
    type: "object"
    description: ""
    properties:
      ID:
        type: "string"
        description: ""

  PreheatInfo:
    type: "object"
    description: |
      return detailed information of a preheat task in supernode. An image preheat task may contain multiple downloading
      task because that an image may have more than one layer.
    properties: 
      ID:
        type: "string"
        description: |
          ID of preheat task.
      status:
        type: "string"
        description: |
          The status of preheat task.
          <pre>
            WAITING -----> RUNNING -----> SUCCESS
                                     |--> FAILED
          </pre>
          The initial status of a created preheat task is WAITING.
          It's finished when a preheat task's status is FAILED or SUCCESS.
          A finished preheat task's information can be queried within 24 hours.
        enum: ["WAITING", "RUNNING", "FAILED", "SUCCESS"]
      startTime:
        type: "string"
        format: "date-time"
        description: "the preheat task start time"
      finishTime:
        type: "string"
        format: "date-time"
        description: "the preheat task finish time"

  PreheatCreateRequest:
    type: "object"
    description: |
      Request option of creating a preheat task in supernode.
    properties:
      type:
        type: "string"
        description: |
          this must be image or file
      url:
        type: "string"
        description: "the image or file location"
      filter:
        type: "string"
        description: ""
      headers:
        type: "object"
        description: |
          If there is any authentication step of the remote server, the headers should contains authenticated information.
          Dragonfly will sent request taking the headers to remote server.
        additionalProperties:
          type: "string"

  PreheatCreateResponse:
    type: "object"
    description: |
      Response of a preheat creation request.
    properties:
      ID:
        type: "string"

  ErrorResponse:
    type: "object"
    description: |
      It contains a code that identify which error occurred for client processing and a detailed error message to read.
    properties:
      code: 
        type: "integer"
        description: |
          the code of this error, it's convenient for client to process with certain error.
      message:
        type: "string"
        description: "detailed error message"
      

responses:
  401ErrorResponse:
    description: An unexpected 401 error occurred.
    schema:
      $ref: "#/definitions/Error"
  404ErrorResponse:
    description: An unexpected 404 error occurred.
    schema:
      $ref: "#/definitions/Error"
  500ErrorResponse:
    description: An unexpected server error occurred.
    schema:
      $ref: "#/definitions/Error"
