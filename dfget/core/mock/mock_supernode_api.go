// Code generated by MockGen. DO NOT EDIT.
// Source: dfget/core/api/supernode_api.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	types "github.com/dragonflyoss/Dragonfly/apis/types"
	types0 "github.com/dragonflyoss/Dragonfly/dfget/types"
)

// MockSupernodeAPI is a mock of SupernodeAPI interface
type MockSupernodeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSupernodeAPIMockRecorder
}

// MockSupernodeAPIMockRecorder is the mock recorder for MockSupernodeAPI
type MockSupernodeAPIMockRecorder struct {
	mock *MockSupernodeAPI
}

// NewMockSupernodeAPI creates a new mock instance
func NewMockSupernodeAPI(ctrl *gomock.Controller) *MockSupernodeAPI {
	mock := &MockSupernodeAPI{ctrl: ctrl}
	mock.recorder = &MockSupernodeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSupernodeAPI) EXPECT() *MockSupernodeAPIMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockSupernodeAPI) Register(node string, req *types0.RegisterRequest) (*types0.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", node, req)
	ret0, _ := ret[0].(*types0.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockSupernodeAPIMockRecorder) Register(node, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSupernodeAPI)(nil).Register), node, req)
}

// PullPieceTask mocks base method
func (m *MockSupernodeAPI) PullPieceTask(node string, req *types0.PullPieceTaskRequest) (*types0.PullPieceTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullPieceTask", node, req)
	ret0, _ := ret[0].(*types0.PullPieceTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullPieceTask indicates an expected call of PullPieceTask
func (mr *MockSupernodeAPIMockRecorder) PullPieceTask(node, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullPieceTask", reflect.TypeOf((*MockSupernodeAPI)(nil).PullPieceTask), node, req)
}

// ReportPiece mocks base method
func (m *MockSupernodeAPI) ReportPiece(node string, req *types0.ReportPieceRequest) (*types0.BaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportPiece", node, req)
	ret0, _ := ret[0].(*types0.BaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportPiece indicates an expected call of ReportPiece
func (mr *MockSupernodeAPIMockRecorder) ReportPiece(node, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportPiece", reflect.TypeOf((*MockSupernodeAPI)(nil).ReportPiece), node, req)
}

// ServiceDown mocks base method
func (m *MockSupernodeAPI) ServiceDown(node, taskID, cid string) (*types0.BaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceDown", node, taskID, cid)
	ret0, _ := ret[0].(*types0.BaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceDown indicates an expected call of ServiceDown
func (mr *MockSupernodeAPIMockRecorder) ServiceDown(node, taskID, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceDown", reflect.TypeOf((*MockSupernodeAPI)(nil).ServiceDown), node, taskID, cid)
}

// ReportClientError mocks base method
func (m *MockSupernodeAPI) ReportClientError(node string, req *types0.ClientErrorRequest) (*types0.BaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportClientError", node, req)
	ret0, _ := ret[0].(*types0.BaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportClientError indicates an expected call of ReportClientError
func (mr *MockSupernodeAPIMockRecorder) ReportClientError(node, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportClientError", reflect.TypeOf((*MockSupernodeAPI)(nil).ReportClientError), node, req)
}

// ReportMetrics mocks base method
func (m *MockSupernodeAPI) ReportMetrics(node string, req *types.TaskMetricsRequest) (*types0.BaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportMetrics", node, req)
	ret0, _ := ret[0].(*types0.BaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportMetrics indicates an expected call of ReportMetrics
func (mr *MockSupernodeAPIMockRecorder) ReportMetrics(node, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportMetrics", reflect.TypeOf((*MockSupernodeAPI)(nil).ReportMetrics), node, req)
}

// HeartBeat mocks base method
func (m *MockSupernodeAPI) HeartBeat(node string, req *types.HeartBeatRequest) (*types0.HeartBeatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeartBeat", node, req)
	ret0, _ := ret[0].(*types0.HeartBeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartBeat indicates an expected call of HeartBeat
func (mr *MockSupernodeAPIMockRecorder) HeartBeat(node, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartBeat", reflect.TypeOf((*MockSupernodeAPI)(nil).HeartBeat), node, req)
}

// FetchP2PNetworkInfo mocks base method
func (m *MockSupernodeAPI) FetchP2PNetworkInfo(node string, start, limit int, req *types.NetworkInfoFetchRequest) (*types.NetworkInfoFetchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchP2PNetworkInfo", node, start, limit, req)
	ret0, _ := ret[0].(*types.NetworkInfoFetchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchP2PNetworkInfo indicates an expected call of FetchP2PNetworkInfo
func (mr *MockSupernodeAPIMockRecorder) FetchP2PNetworkInfo(node, start, limit, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchP2PNetworkInfo", reflect.TypeOf((*MockSupernodeAPI)(nil).FetchP2PNetworkInfo), node, start, limit, req)
}

// ReportResource mocks base method
func (m *MockSupernodeAPI) ReportResource(node string, req *types0.RegisterRequest) (*types0.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportResource", node, req)
	ret0, _ := ret[0].(*types0.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportResource indicates an expected call of ReportResource
func (mr *MockSupernodeAPIMockRecorder) ReportResource(node, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportResource", reflect.TypeOf((*MockSupernodeAPI)(nil).ReportResource), node, req)
}

// ApplyForSeedNode mocks base method
func (m *MockSupernodeAPI) ApplyForSeedNode(node string, req *types0.RegisterRequest) (*types0.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyForSeedNode", node, req)
	ret0, _ := ret[0].(*types0.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyForSeedNode indicates an expected call of ApplyForSeedNode
func (mr *MockSupernodeAPIMockRecorder) ApplyForSeedNode(node, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyForSeedNode", reflect.TypeOf((*MockSupernodeAPI)(nil).ApplyForSeedNode), node, req)
}

// ReportResourceDeleted mocks base method
func (m *MockSupernodeAPI) ReportResourceDeleted(node, taskID, cid string) (*types0.BaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportResourceDeleted", node, taskID, cid)
	ret0, _ := ret[0].(*types0.BaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportResourceDeleted indicates an expected call of ReportResourceDeleted
func (mr *MockSupernodeAPIMockRecorder) ReportResourceDeleted(node, taskID, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportResourceDeleted", reflect.TypeOf((*MockSupernodeAPI)(nil).ReportResourceDeleted), node, taskID, cid)
}

// DeleteStreamCache mocks base method
func (m *MockSupernodeAPI) DeleteStreamCache(node string, req *types0.ReportPieceRequest) (*types0.BaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamCache", node, req)
	ret0, _ := ret[0].(*types0.BaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamCache indicates an expected call of DeleteStreamCache
func (mr *MockSupernodeAPIMockRecorder) DeleteStreamCache(node, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamCache", reflect.TypeOf((*MockSupernodeAPI)(nil).DeleteStreamCache), node, req)
}
