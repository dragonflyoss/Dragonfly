// Code generated by MockGen. DO NOT EDIT.
// Source: dfget/core/api/uploader_api.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/dragonflyoss/Dragonfly/dfget/core/api"
)

// MockUploaderAPI is a mock of UploaderAPI interface
type MockUploaderAPI struct {
	ctrl     *gomock.Controller
	recorder *MockUploaderAPIMockRecorder
}

// MockUploaderAPIMockRecorder is the mock recorder for MockUploaderAPI
type MockUploaderAPIMockRecorder struct {
	mock *MockUploaderAPI
}

// NewMockUploaderAPI creates a new mock instance
func NewMockUploaderAPI(ctrl *gomock.Controller) *MockUploaderAPI {
	mock := &MockUploaderAPI{ctrl: ctrl}
	mock.recorder = &MockUploaderAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUploaderAPI) EXPECT() *MockUploaderAPIMockRecorder {
	return m.recorder
}

// ParseRate mocks base method
func (m *MockUploaderAPI) ParseRate(ip string, port int, req *api.ParseRateRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRate", ip, port, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRate indicates an expected call of ParseRate
func (mr *MockUploaderAPIMockRecorder) ParseRate(ip, port, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRate", reflect.TypeOf((*MockUploaderAPI)(nil).ParseRate), ip, port, req)
}

// CheckServer mocks base method
func (m *MockUploaderAPI) CheckServer(ip string, port int, req *api.CheckServerRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckServer", ip, port, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckServer indicates an expected call of CheckServer
func (mr *MockUploaderAPIMockRecorder) CheckServer(ip, port, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServer", reflect.TypeOf((*MockUploaderAPI)(nil).CheckServer), ip, port, req)
}

// FinishTask mocks base method
func (m *MockUploaderAPI) FinishTask(ip string, port int, req *api.FinishTaskRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishTask", ip, port, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishTask indicates an expected call of FinishTask
func (mr *MockUploaderAPIMockRecorder) FinishTask(ip, port, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTask", reflect.TypeOf((*MockUploaderAPI)(nil).FinishTask), ip, port, req)
}

// PingServer mocks base method
func (m *MockUploaderAPI) PingServer(ip string, port int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingServer", ip, port)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PingServer indicates an expected call of PingServer
func (mr *MockUploaderAPIMockRecorder) PingServer(ip, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingServer", reflect.TypeOf((*MockUploaderAPI)(nil).PingServer), ip, port)
}

// RegisterStreamTask mocks base method
func (m *MockUploaderAPI) RegisterStreamTask(ip string, port int, req *api.RegisterStreamTaskRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterStreamTask", ip, port, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterStreamTask indicates an expected call of RegisterStreamTask
func (mr *MockUploaderAPIMockRecorder) RegisterStreamTask(ip, port, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStreamTask", reflect.TypeOf((*MockUploaderAPI)(nil).RegisterStreamTask), ip, port, req)
}

// DeliverPieceToUploader mocks base method
func (m *MockUploaderAPI) DeliverPieceToUploader(ip string, port int, req *api.UploadStreamPieceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeliverPieceToUploader", ip, port, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeliverPieceToUploader indicates an expected call of DeliverPieceToUploader
func (mr *MockUploaderAPIMockRecorder) DeliverPieceToUploader(ip, port, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeliverPieceToUploader", reflect.TypeOf((*MockUploaderAPI)(nil).DeliverPieceToUploader), ip, port, req)
}
