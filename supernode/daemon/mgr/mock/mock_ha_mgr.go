// Code generated by MockGen. DO NOT EDIT.
// Source: ha_mgr.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/dragonflyoss/Dragonfly/apis/types"
	config "github.com/dragonflyoss/Dragonfly/supernode/config"

	gomock "github.com/golang/mock/gomock"
)

// MockHaMgr is a mock of HaMgr interface
type MockHaMgr struct {
	ctrl     *gomock.Controller
	recorder *MockHaMgrMockRecorder
}

// MockHaMgrMockRecorder is the mock recorder for MockHaMgr
type MockHaMgrMockRecorder struct {
	mock *MockHaMgr
}

// NewMockHaMgr creates a new mock instance
func NewMockHaMgr(ctrl *gomock.Controller) *MockHaMgr {
	mock := &MockHaMgr{ctrl: ctrl}
	mock.recorder = &MockHaMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHaMgr) EXPECT() *MockHaMgrMockRecorder {
	return m.recorder
}

// CloseHaManager mocks base method
func (m *MockHaMgr) CloseHaManager(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseHaManager", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseHaManager indicates an expected call of CloseHaManager
func (mr *MockHaMgrMockRecorder) CloseHaManager(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseHaManager", reflect.TypeOf((*MockHaMgr)(nil).CloseHaManager), ctx)
}

// HADaemon mocks base method
func (m *MockHaMgr) HADaemon(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HADaemon", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HADaemon indicates an expected call of HADaemon
func (mr *MockHaMgrMockRecorder) HADaemon(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HADaemon", reflect.TypeOf((*MockHaMgr)(nil).HADaemon), ctx)
}

// SendPostCopy mocks base method
func (m *MockHaMgr) SendPostCopy(ctx context.Context, req interface{}, path string, node *config.SupernodeInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPostCopy", ctx, req, path, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPostCopy indicates an expected call of SendPostCopy
func (mr *MockHaMgrMockRecorder) SendPostCopy(ctx, req, path, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPostCopy", reflect.TypeOf((*MockHaMgr)(nil).SendPostCopy), ctx, req, path, node)
}

// TriggerOtherSupernodeDownload mocks base method
func (m *MockHaMgr) TriggerOtherSupernodeDownload(ctx context.Context, req *types.TaskRegisterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerOtherSupernodeDownload", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerOtherSupernodeDownload indicates an expected call of TriggerOtherSupernodeDownload
func (mr *MockHaMgrMockRecorder) TriggerOtherSupernodeDownload(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerOtherSupernodeDownload", reflect.TypeOf((*MockHaMgr)(nil).TriggerOtherSupernodeDownload), ctx, req)
}
