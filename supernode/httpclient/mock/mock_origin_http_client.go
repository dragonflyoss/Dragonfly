// Code generated by MockGen. DO NOT EDIT.
// Source: supernode/httpclient/origin_http_client.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	strfmt "github.com/go-openapi/strfmt"
	gomock "github.com/golang/mock/gomock"
)

// MockOriginHTTPClient is a mock of OriginHTTPClient interface
type MockOriginHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockOriginHTTPClientMockRecorder
}

// MockOriginHTTPClientMockRecorder is the mock recorder for MockOriginHTTPClient
type MockOriginHTTPClientMockRecorder struct {
	mock *MockOriginHTTPClient
}

// NewMockOriginHTTPClient creates a new mock instance
func NewMockOriginHTTPClient(ctrl *gomock.Controller) *MockOriginHTTPClient {
	mock := &MockOriginHTTPClient{ctrl: ctrl}
	mock.recorder = &MockOriginHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOriginHTTPClient) EXPECT() *MockOriginHTTPClientMockRecorder {
	return m.recorder
}

// RegisterTLSConfig mocks base method
func (m *MockOriginHTTPClient) RegisterTLSConfig(rawURL string, insecure bool, caBlock []strfmt.Base64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterTLSConfig", rawURL, insecure, caBlock)
}

// RegisterTLSConfig indicates an expected call of RegisterTLSConfig
func (mr *MockOriginHTTPClientMockRecorder) RegisterTLSConfig(rawURL, insecure, caBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTLSConfig", reflect.TypeOf((*MockOriginHTTPClient)(nil).RegisterTLSConfig), rawURL, insecure, caBlock)
}

// GetContentLength mocks base method
func (m *MockOriginHTTPClient) GetContentLength(url string, headers map[string]string) (int64, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentLength", url, headers)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContentLength indicates an expected call of GetContentLength
func (mr *MockOriginHTTPClientMockRecorder) GetContentLength(url, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentLength", reflect.TypeOf((*MockOriginHTTPClient)(nil).GetContentLength), url, headers)
}

// IsSupportRange mocks base method
func (m *MockOriginHTTPClient) IsSupportRange(url string, headers map[string]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSupportRange", url, headers)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSupportRange indicates an expected call of IsSupportRange
func (mr *MockOriginHTTPClientMockRecorder) IsSupportRange(url, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSupportRange", reflect.TypeOf((*MockOriginHTTPClient)(nil).IsSupportRange), url, headers)
}

// IsExpired mocks base method
func (m *MockOriginHTTPClient) IsExpired(url string, headers map[string]string, lastModified int64, eTag string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExpired", url, headers, lastModified, eTag)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExpired indicates an expected call of IsExpired
func (mr *MockOriginHTTPClientMockRecorder) IsExpired(url, headers, lastModified, eTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExpired", reflect.TypeOf((*MockOriginHTTPClient)(nil).IsExpired), url, headers, lastModified, eTag)
}

// Download mocks base method
func (m *MockOriginHTTPClient) Download(url string, headers map[string]string, checkCode int) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", url, headers, checkCode)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (mr *MockOriginHTTPClientMockRecorder) Download(url, headers, checkCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockOriginHTTPClient)(nil).Download), url, headers, checkCode)
}
